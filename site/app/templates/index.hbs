<div class='bg-white'>
  <main>
    <div class='pt-10 bg-gray-900 sm:pt-16 lg:pt-8 lg:pb-14 lg:overflow-hidden'>
      <div class='mx-auto max-w-7xl lg:px-8'>
        <div class='lg:grid lg:grid-cols-2 lg:gap-8'>
          <div
            class='max-w-md px-4 mx-auto sm:max-w-2xl sm:px-6 sm:text-center lg:px-0 lg:text-left lg:flex lg:items-center'
          >
            <div class='lg:py-24'>
              <h1
                class='mt-4 text-4xl font-extrabold tracking-tight text-white sm:mt-5 sm:text-6xl lg:mt-6 xl:text-6xl'
              >
                <span class='block'>
                  A better way to
                </span>
                <span
                  class='block pb-3 text-transparent bg-clip-text bg-gradient-to-r from-ember to-red-50 sm:pb-5'
                >
                  build Ember.js apps
                </span>
              </h1>
              <p
                class='text-base text-gray-300 sm:text-xl lg:text-lg xl:text-xl'
              >
                <strong class='align-middle'>
                  ember-statecharts
                </strong>
                <span class='align-middle'>
                  provides an easy way to use
                </span>
                <a
                  href='https://xstate.js.org/'
                  target='_blank'
                  rel='noopener noreferrer'
                >
                  {{svg-jar
                    'xstate'
                    class='inline w-16 h-8 align-middle fill-current text-current hover:text-white'
                  }}
                </a>
                <strong class='align-middle'>
                  statecharts
                </strong>
                <span class='align-middle'>
                  in Ember.js applications
                </span>
              </p>
              <div class='mt-4 sm:mt-6'>
                <div class='items-center sm:flex'>
                  <div class='flex-1 min-w-0'>
                    <div
                      class='px-4 py-2 my-6 overflow-hidden bg-gray-100 rounded-md'
                    >
                      <code class='select-all'>
                        ember install ember-statecharts
                      </code>
                    </div>
                  </div>
                  <div class='mt-3 sm:mt-0 sm:ml-3'>
                    <LinkTo @route='docs'>
                      <button
                        type='button'
                        class='block w-full px-4 py-3 font-medium text-white shadow rounded-md bg-ember focus:outline-none'
                      >
                        Read the docs
                      </button>
                    </LinkTo>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class='mt-12 -mb-16 sm:-mb-48 lg:m-0 lg:relative'>
            <div
              class='max-w-md px-4 mx-auto sm:max-w-2xl sm:px-6 lg:max-w-none lg:px-0'
            >
              <img
                class='w-full lg:absolute lg:inset-y-0 lg:left-0 lg:h-full lg:w-auto lg:max-w-none'
                src='/architect.svg'
                alt='Female drawing an architecture sketch'
              />
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class='relative pt-16 bg-gray-50 sm:pt-24 lg:pt-32'>
      <div
        class='max-w-md px-4 mx-auto text-center sm:px-6 sm:max-w-3xl lg:px-8 lg:max-w-7xl'
      >
        <div>
          <h2
            class='text-base font-semibold tracking-wider uppercase text-ember'
          >
            Architect Behavior
          </h2>
          <p
            class='mt-2 text-3xl font-extrabold tracking-tight text-gray-900 sm:text-4xl'
          >
            Complex user flows? No problem.
          </p>
          <p class='mx-auto mt-5 text-xl text-gray-500 max-w-prose'>
            Modeling  complex user flows with a
            <strong>
              visual language
            </strong>
            based on
            <strong>
              states
            </strong>
            and
            <strong>
              events
            </strong>
            has proven itself to be an efficient method to develop complex reactive applications. Modeling with
            <strong>
              statecharts
            </strong>
            allows you to
            <strong>
              visualize
            </strong>
            your application's behavior and simplifies communication with the rest of your team.
          </p>
        </div>
        <div class='mt-12 -mb-10 sm:-mb-24 lg:-mb-80'>
          <a
            href='https://xstate.js.org/viz/'
            target='_blank'
            rel='noreferrer noopener'
          >
            <img
              class='rounded-lg shadow-xl ring-1 ring-black ring-opacity-5'
              src='/xstate-viz.png'
              alt='XState visualizer application'
            />
          </a>
        </div>
      </div>
    </div>
    <div class='relative py-16 bg-white sm:py-24 lg:py-32'>
      <div
        class='max-w-md px-4 mx-auto text-center sm:max-w-3xl sm:px-6 lg:px-8 lg:max-w-7xl'
      >
        <h2 class='text-base font-semibold tracking-wider uppercase text-ember'>
          Architect robust applications
        </h2>
        <p
          class='mt-2 text-3xl font-extrabold tracking-tight text-gray-900 sm:text-4xl'
        >
          Model application behavior that cannot break
        </p>
        <p class='mx-auto mt-5 text-xl text-gray-500 max-w-prose'>
          With
          <strong>
            ember-statecharts
          </strong>
          you model how your application and its components behave explicitly. These models can be interpreted and executed by ember-statecharts and
          <strong>
            make it impossible to trigger invalid application behavior.
          </strong>
        </p>
        <div class='mt-12'>
          <div class='grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3'>
            <div class='pt-6'>
              <div class='px-6 pb-8 rounded-lg flow-root bg-gray-50'>
                <div class='-mt-6'>
                  <div>
                    <span
                      class='inline-flex items-center justify-center p-3 shadow-lg bg-ember rounded-md'
                    >
                      <svg
                        class='w-6 h-6 text-white'
                        fill='none'
                        stroke='currentColor'
                        viewBox='0 0 24 24'
                        xmlns='http://www.w3.org/2000/svg'
                      >
                        <path
                          stroke-linecap='round'
                          stroke-linejoin='round'
                          stroke-width='2'
                          d='M15 15l-2 5L9 9l11 4-5 2zm0 0l5 5M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.12 2.122'
                        ></path>
                      </svg>
                    </span>
                  </div>
                  <h3
                    class='mt-8 text-lg font-medium tracking-tight text-gray-900'
                  >
                    Model behavior explicitly
                  </h3>
                  <p class='mt-5 text-base text-gray-500'>
                    Instead of relying on implicit states that you manage by setting properties on your objects, you will model your behavior as a set of explicit states that handle events.
                  </p>
                </div>
              </div>
            </div>

            <div class='pt-6'>
              <div class='px-6 pb-8 rounded-lg flow-root bg-gray-50'>
                <div class='-mt-6'>
                  <div>
                    <span
                      class='inline-flex items-center justify-center p-3 shadow-lg bg-ember rounded-md'
                    >
                      <svg
                        class='w-6 h-6 text-white'
                        fill='none'
                        stroke='currentColor'
                        viewBox='0 0 24 24'
                        xmlns='http://www.w3.org/2000/svg'
                      >
                        <path
                          stroke-linecap='round'
                          stroke-linejoin='round'
                          stroke-width='2'
                          d='M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z'
                        ></path>
                      </svg>
                    </span>
                  </div>
                  <h3
                    class='mt-8 text-lg font-medium tracking-tight text-gray-900'
                  >
                    Create Apps that don't break
                  </h3>
                  <p class='mt-5 text-base text-gray-500'>
                    Because behavior is only executed when a given state understands an event that is being received it is impossible to trigger invalid or unexpected application behavior.
                  </p>
                </div>
              </div>
            </div>

            <div class='pt-6'>
              <div class='px-6 pb-8 rounded-lg flow-root bg-gray-50'>
                <div class='-mt-6'>
                  <div>
                    <span
                      class='inline-flex items-center justify-center p-3 shadow-lg bg-ember rounded-md'
                    >
                      <svg
                        class='w-6 h-6 text-white'
                        xmlns='http://www.w3.org/2000/svg'
                        fill='none'
                        viewBox='0 0 24 24'
                        stroke='currentColor'
                        aria-hidden='true'
                      >
                        <path
                          stroke-linecap='round'
                          stroke-linejoin='round'
                          stroke-width='2'
                          d='M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15'
                        ></path>
                      </svg>
                    </span>
                  </div>
                  <h3
                    class='mt-8 text-lg font-medium tracking-tight text-gray-900'
                  >
                    Refactor and refine with confidence
                  </h3>
                  <p class='mt-5 text-base text-gray-500'>
                    Application flows modeled with statecharts are easy to change without the risk of breaking existing behavior.
                  </p>
                </div>
              </div>
            </div>

            <div class='pt-6'>
              <div class='px-6 pb-8 rounded-lg flow-root bg-gray-50'>
                <div class='-mt-6'>
                  <div>
                    <span
                      class='inline-flex items-center justify-center p-3 shadow-lg bg-ember rounded-md'
                    >
                      <svg
                        class='w-6 h-6 text-white'
                        fill='none'
                        stroke='currentColor'
                        viewBox='0 0 24 24'
                        xmlns='http://www.w3.org/2000/svg'
                      >
                        <path
                          stroke-linecap='round'
                          stroke-linejoin='round'
                          stroke-width='2'
                          d='M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z'
                        ></path>
                      </svg>
                    </span>
                  </div>
                  <h3
                    class='mt-8 text-lg font-medium tracking-tight text-gray-900'
                  >
                    Document behavior
                  </h3>
                  <p class='mt-5 text-base text-gray-500'>
                    Statecharts can be visualized - you are automatically documenting the existing behavior of all parts of your app that you model with them.
                  </p>
                </div>
              </div>
            </div>

            <div class='pt-6'>
              <div class='px-6 pb-8 rounded-lg flow-root bg-gray-50'>
                <div class='-mt-6'>
                  <div>
                    <span
                      class='inline-flex items-center justify-center p-3 shadow-lg bg-ember rounded-md'
                    >
                      <svg
                        class='w-6 h-6 text-white'
                        fill='none'
                        stroke='currentColor'
                        viewBox='0 0 24 24'
                        xmlns='http://www.w3.org/2000/svg'
                      >
                        <path
                          stroke-linecap='round'
                          stroke-linejoin='round'
                          stroke-width='2'
                          d='M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z'
                        ></path>
                      </svg>
                    </span>
                  </div>
                  <h3
                    class='mt-8 text-lg font-medium tracking-tight text-gray-900'
                  >
                    Identify missing requirements
                  </h3>
                  <p class='mt-5 text-base text-gray-500'>
                    Because you make use of a visual language that describes behavior it gets very easy to identify what is missing in requirement specifications.
                  </p>
                </div>
              </div>
            </div>

            <div class='pt-6'>
              <div class='px-6 pb-8 rounded-lg flow-root bg-gray-50'>
                <div class='-mt-6'>
                  <div>
                    <span
                      class='inline-flex items-center justify-center p-3 shadow-lg bg-ember rounded-md'
                    >
                      <svg
                        class='w-6 h-6 text-white'
                        fill='none'
                        stroke='currentColor'
                        viewBox='0 0 24 24'
                        xmlns='http://www.w3.org/2000/svg'
                      >
                        <path
                          stroke-linecap='round'
                          stroke-linejoin='round'
                          stroke-width='2'
                          d='M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a1.994 1.994 0 01-1.414-.586m0 0L11 14h4a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2v4l.586-.586z'
                        ></path>
                      </svg>
                    </span>
                  </div>
                  <h3
                    class='mt-8 text-lg font-medium tracking-tight text-gray-900'
                  >
                    Collaborate with other stakeholders
                  </h3>
                  <p class='mt-5 text-base text-gray-500'>
                    Statecharts make it possible to collaborate with non-technical stakeholders
                    who have a much easier time thinking in states and events than they have
                    understanding code.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class='pb-16 bg-ember lg:pb-0 lg:z-10 lg:relative'>
      <div
        class='lg:mx-auto lg:max-w-7xl lg:px-8 lg:grid lg:grid-cols-3 lg:gap-8'
      >
        <div class='relative lg:-my-8'>
          <div
            aria-hidden='true'
            class='absolute inset-x-0 top-0 bg-white h-1/2 lg:hidden'
          ></div>
          <div
            class='max-w-md px-4 mx-auto sm:max-w-3xl sm:px-6 lg:p-0 lg:h-full'
          >
            <div
              class='overflow-hidden border shadow-2xl aspect-w-10 aspect-h-6 rounded-xl sm:aspect-w-16 sm:aspect-h-7 lg:aspect-none lg:h-full'
            >
              <a
                href='http://www.wisdom.weizmann.ac.il/~harel/SCANNED.PAPERS/Statecharts.pdf'
                alt='Statecharts: A Visual Formalism For Complex Systems'
                target='_blank'
                rel='noreferrer noopener'
              >
                <img
                  class='object-cover lg:h-full lg:w-full'
                  src='/harel-statechart-paper.png'
                  alt="The first page of David Harel's statechart paper"
                />
              </a>
            </div>
          </div>
        </div>
        <div class='mt-12 lg:m-0 lg:col-span-2 lg:pl-8'>
          <div
            class='max-w-md px-4 mx-auto sm:max-w-2xl sm:px-6 lg:px-0 lg:py-20 lg:max-w-none'
          >
            <blockquote>
              <a
                href='http://www.wisdom.weizmann.ac.il/~harel/SCANNED.PAPERS/Statecharts.pdf'
                alt='Statecharts: A Visual Formalism For Complex Systems'
                target='_blank'
                rel='noreferrer noopener'
              >
                <div>
                  <svg
                    class='w-12 h-12 text-white opacity-25'
                    fill='currentColor'
                    viewBox='0 0 32 32'
                    aria-hidden='true'
                  >
                    <path
                      d='M9.352 4C4.456 7.456 1 13.12 1 19.36c0 5.088 3.072 8.064 6.624 8.064 3.36 0 5.856-2.688 5.856-5.856 0-3.168-2.208-5.472-5.088-5.472-.576 0-1.344.096-1.536.192.48-3.264 3.552-7.104 6.624-9.024L9.352 4zm16.512 0c-4.8 3.456-8.256 9.12-8.256 15.36 0 5.088 3.072 8.064 6.624 8.064 3.264 0 5.856-2.688 5.856-5.856 0-3.168-2.304-5.472-5.184-5.472-.576 0-1.248.096-1.44.192.48-3.264 3.456-7.104 6.528-9.024L25.864 4z'
                    ></path>
                  </svg>
                  <p class='mt-6 text-2xl font-medium text-white'>
                    The behavior of a reactive system is really the set of allowed sequences of input and output events, conditions, and actions (...) Statecharts provide one possible fitting formalism for specifying reactive behavior.
                  </p>
                </div>
                <footer class='mt-6'>
                  <p class='text-base font-medium text-white'>
                    David Harel
                  </p>
                  <p
                    class='text-base font-medium text-red-900 underline text-underline-under'
                  >
                    Statecharts: A Visual Formalism for Complex Systems, 1986
                  </p>
                </footer>
              </a>
            </blockquote>
          </div>
        </div>
      </div>
    </div>
    <div class='relative py-16 bg-gray-50 sm:py-24 lg:py-32'>
      <div class='relative'>
        <div
          class='max-w-md px-4 mx-auto text-center sm:max-w-3xl sm:px-6 lg:px-8 lg:max-w-7xl'
        >
          <h2
            class='text-base font-semibold tracking-wider uppercase text-ember'
          >
            Learn
          </h2>
          <p
            class='mt-2 text-3xl font-extrabold tracking-tight text-gray-900 sm:text-4xl'
          >
            Helpful Resources
          </p>
          <p class='mx-auto mt-5 text-xl text-gray-500 max-w-prose'>
            <span class='align-middle'>
              Statecharts have proven themselves to be a valuable tool to model complex reactive systems for other parts of the software engineering industry. Getting to know a new technique to model your Ember.js applications explicitly based on
            </span>

            <a
              href='https://xstate.js.org/'
              target='_blank'
              rel='noopener noreferrer'
            >
              {{svg-jar
                'xstate'
                class='inline w-16 h-8 align-middle fill-current text-current hover:text-gray-700'
              }}
            </a>
            <span class='align-middle'>
              and statecharts can feel like a daunting task though - here are some resources to help you get started.
            </span>
          </p>
        </div>
        <div
          class='max-w-md px-4 mx-auto mt-12 grid gap-8 sm:max-w-lg sm:px-6 lg:px-8 lg:grid-cols-3 lg:max-w-7xl'
        >
          <div
            class='flex flex-col overflow-hidden bg-white rounded-lg shadow-lg transform hover:scale-105 transition-all ease-in-out'
          >
            <LinkTo @route='docs.tutorial'>
              <div class='flex-shrink-0'>
                <img
                  class='object-cover w-full h-48 filter brightness-90'
                  src='/tutorial.png'
                  alt='Tutorial page'
                />
              </div>
              <div class='flex flex-col justify-between flex-1 p-6 bg-white'>
                <div class='flex-1'>
                  <p class='text-sm font-medium text-ember'>
                    Tutorial
                  </p>
                  <div class='mt-2'>
                    <p class='text-xl font-semibold text-gray-900'>
                      Read the Getting Started guide
                    </p>
                    <p class='mt-3 text-base text-gray-500'>
                      <strong>
                        ember-statecharts'
                      </strong>
                      tutorial will get you up to speed quickly. The tutorial walks you through how you can implement an async button component from scratch. You will learn how to model behavior explicitly based on the requirements you get and how to use that model to implement an
                      <code>
                        AsyncButton
                      </code>
                      component.
                    </p>
                  </div>
                </div>
              </div>
            </LinkTo>
          </div>

          <div
            class='flex flex-col overflow-hidden bg-white rounded-lg shadow-lg transform hover:scale-105 transition-all ease-in-out'
          >
            <a
              href='https://xstate.js.org/docs/'
              target='_blank'
              rel='noreferrer noopener'
            >
              <div class='flex-shrink-0'>
                <img
                  class='object-cover w-full h-48'
                  src='/xstate-guides.png'
                  alt='XState guides'
                />
              </div>
              <div class='flex flex-col justify-between flex-1 p-6 bg-white'>
                <div class='flex-1'>
                  <p class='text-sm font-medium text-ember'>
                    XState Documentation
                  </p>
                  <div class='mt-2'>
                    <p class='text-xl font-semibold text-gray-900'>
                      A deep dive into XState
                    </p>
                    <p class='mt-3 text-base text-gray-500'>
                      <span class='align-middle'>
                        Everything that ember-statecharts is doing is powered by the wonderful
                      </span>
                      {{svg-jar
                        'xstate'
                        class='inline h-6 align-middle fill-current w-14 text-current'
                      }}
                      <span class='align-middle'>
                        library. The XState guides provide extensive documentation about how to write statechart configurations - please make use of this invaluable resource.
                      </span>
                    </p>
                  </div>
                </div>
              </div>
            </a>
          </div>

          <div
            class='flex flex-col overflow-hidden bg-white rounded-lg shadow-lg hover:scale-105 transform transition-all ease-in-out'
          >
            <a
              href='https://www.effective-ember.com/blog/robust-uis-with-statecharts/'
            >
              <div class='flex-shrink-0'>
                <img
                  class='object-cover w-full h-48 filter brightness-90'
                  src='/statecharts-blog.png'
                  alt='Statecharts blogpost'
                />
              </div>
              <div class='flex flex-col justify-between flex-1 p-6 mb-4'>
                <div class='flex-1'>
                  <p class='text-sm font-medium text-ember'>
                    Blog
                  </p>
                  <div class='mt-2'>
                    <p class='text-xl font-semibold text-gray-900'>
                      Constructing robust Ember.js UIs with Statecharts
                    </p>
                    <p class='mt-3 text-base text-gray-500'>
                      <span class='align-middle'>
                        This post on the
                      </span>
                      <span
                        class='inline-flex items-center normal-case align-middle'
                      >
                        {{svg-jar
                          'effective-ember'
                          class='w-6 h-6 fill-current text-ember'
                        }}
                        <span class='ml-1 font-bold tracking-tighter'>
                          effective ember
                        </span>
                      </span>
                      <span class='align-middle'>
                        blog shows you how to build a complex feature with ember-statecharts from scratch. The post starts out with explicitly modeling the behavior of a typeahead component and ends with the implementation of a Glimmer component that uses the modeled behavior via ember-statecharts'
                        <strong>
                          useMachine
                        </strong>
                        -usable.
                      </span>
                    </p>
                  </div>
                </div>
              </div>
            </a>
          </div>
        </div>
      </div>
    </div>
    <div class='relative bg-gray-900'>
      <div
        class='relative h-56 bg-indigo-600 sm:h-72 md:absolute md:left-0 md:h-full md:w-1/2'
      >
        <img
          class='object-cover w-full h-full'
          src='https://images.unsplash.com/photo-1503387837-b154d5074bd2?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=3578&q=80'
          alt='Architect doing a sketch'
        />
        <div
          aria-hidden='true'
          class='absolute inset-0 bg-gradient-to-r from-ember to-red-200 mix-blend-multiply'
        ></div>
      </div>
      <div
        class='relative max-w-md px-4 py-12 mx-auto sm:max-w-7xl sm:px-6 sm:py-20 md:py-28 lg:px-8 lg:py-32'
      >
        <div class='md:ml-auto md:w-1/2 md:pl-10'>
          <h2
            class='text-base font-semibold tracking-wider text-gray-300 uppercase'
          >
            <span class='align-middle'>
              Developed by
            </span>
            <a
              href='https://www.effective-ember.com'
              target='_blank'
              rel='noreferrer noopener'
            >
              <span
                class='inline-flex items-center normal-case align-middle transform hover:scale-105 transition-transform ease-in-out'
              >
                {{svg-jar
                  'effective-ember'
                  class='w-6 h-6 fill-current text-ember'
                }}
                <span class='ml-1 font-bold tracking-tighter'>
                  effective ember
                </span>
              </span>
            </a>
          </h2>
          <p
            class='mt-2 text-3xl font-extrabold tracking-tight text-white sm:text-4xl'
          >
            We're here to help
          </p>
          <p class='mt-3 text-lg text-gray-300'>
            As the creators of
            <strong>
              ember-statecharts,
            </strong>
            <span>
              we are very excited about the possibilities that statecharts open up when developing Ember.js applications and have
              <strong>
                multiple years of experience in modeling ambitious applications with the concept.
              </strong>
              When you are getting started with modeling your Ember.js apps with statecharts and feel you might want some support to get a head start on this exciting paradigm we are more than happy to help.
            </span>
          </p>
          <div class='mt-8'>
            <div class='inline-flex shadow rounded-md'>
              <a
                href='https://www.effective-ember.com/'
                target='_blank'
                rel='noopener noreferrer'
                class='inline-flex items-center justify-center px-5 py-3 text-base font-medium text-gray-900 bg-white border border-transparent rounded-md hover:bg-gray-50'
              >
                Get help getting started
                <svg
                  class='w-5 h-5 ml-3 -mr-1 text-gray-400'
                  xmlns='http://www.w3.org/2000/svg'
                  viewBox='0 0 20 20'
                  fill='currentColor'
                  aria-hidden='true'
                >
                  <path
                    d='M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z'
                  ></path>
                  <path
                    d='M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z'
                  ></path>
                </svg>
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
</div>
